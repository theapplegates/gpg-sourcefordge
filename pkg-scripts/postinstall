#!/usr/bin/env sh
# vim: ft=sh ts=4 sw=4 noet

# This file is part of GnuPG for OS X.
#
# GnuPG for OS X is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GnuPG for OS X is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GnuPG for OS X. If not, see https://www.gnu.org/licenses/ .

# The following line will be modified during packaging
GPGOSX_INSTALLDIR=/usr/local/gnupg-2.2

_die() {
	echo >&2 "$@"
	exit 1
}

_mkdir() {
	[ -d "${1}" ] || mkdir -p "${1}" || _die "Cannot create directory ${1}"
}

_truststore() {
	# Create CA trust store for gnutls by exporting all certificates from all keychains.
	p="${GPGOSX_INSTALLDIR}/share"
	_mkdir "${p}"
	/usr/bin/security >"${p}/ca-certs.crt" find-certificate -a \
		-p /System/Library/Keychains/SystemRootCertificates.keychain
}

_links() {
	# Link executables. Existing old link would have been overwritten during pre-install.
	p=/usr/local/bin
	_mkdir "${p}"
	for f in gpg gpgconf gpgme-json gpgsm; do
		ln -fs "${GPGOSX_INSTALLDIR}/bin/${f}" "${p}/${f}"
	done
	ln -fs "${GPGOSX_INSTALLDIR}/bin/gpg" "${p}/gpg2"
	# Link libraries.
	p=/usr/local/lib
	_mkdir "${p}"
	ln -fs "${GPGOSX_INSTALLDIR}/lib/libgpgme.dylib" "${p}/libgpgme.dylib"
}

_manpath() {
	c=/private/etc/man.conf
	p="${GPGOSX_INSTALLDIR}/share/man"
	# shellcheck disable=2046
	[ $(grep -c "MANPATH.*${p}" "${c}") -ne 0 ] || echo >>"${c}" "MANPATH ${p} # Added by GnuPG"
	echo >/private/etc/manpaths.d/GnuPG "${GPGOSX_INSTALLDIR}/share/man"
}

_dirmngr() {
	# dirmngr requires nsswitch.conf
	c=/private/etc/nsswitch.conf
	[ -f "${c}" ] || echo >"${c}" 'hosts: files dns'
	x=org.gnupg.gpgosx.dirmngr
	# shellcheck disable=2046
	[ $(launchctl list | grep -c "${x}") -eq 0 ] || launchctl remove "${x}"
}

_gpgtools() {
	gt=$(pkgutil --pkgs | grep '^org.gpgtools')
	[ -n "${gt}" ] || return
	r=$(osascript -e 'set question to "Found an existing installation of GPG Tools (MacGPG2). It is recommend to uninstall it to avoid compatibility issues with GnuPG.\n\nDo you want to uninstall GPG Tools?"
set cancel to "Ignore"
set uninst to "Uninstall GPG Tools"
display dialog question buttons {cancel, uninst} default button uninst
')
	# shellcheck disable=2046
	[ $(echo "${r}" | grep -c 'Uninstall GPG Tools') -ne 0 ] || return
	xl="
		org.gpgtools.Libmacgpg.xpc
		org.gpgtools.gpgmail.patch-uuid-user
		org.gpgtools.macgpg2.fix
		org.gpgtools.macgpg2.gpg-agent
		org.gpgtools.macgpg2.shutdown-gpg-agent
		org.gpgtools.macgpg2.updater
	"
	for x in ${xl}; do
		launchctl stop "${x}"
	done
	for x in ${xl}; do
		launchctl remove "${x}"
	done
	cd /
	for t in ${gt}; do
		pkgutil --only-files --files "${t}" | tr '\n' '\0' | xargs -n 1 -0 rm -f
	done
	rm -fr /usr/local/MacGPG2 || true
	for t in $(pkgutil --pkgs | grep '^org.gpgtools'); do
		pkgutil --forget "${t}"
	done
}

# Kill all (potentially) running daemons.
killall -kill dirmngr gpg-agent scdaemon

_truststore
_links
_manpath
_dirmngr
_gpgtools

exit 0
